name: 🚀 Deploy Insurance Portal

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: insurance-portal-api
  API_SERVICE_ARN: arn:aws:apprunner:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:service/insurance-portal-api/${{ secrets.APP_RUNNER_SERVICE_ID }}
  S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🔨 Build API
        run: dotnet build --no-restore --configuration Release

      - name: 🧪 Run Tests
        run: dotnet test --no-build --verbosity normal --configuration Release

  deploy-api:
    name: 🐳 Deploy API to AWS App Runner
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      api-url: ${{ steps.get-api-url.outputs.url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🔨 Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          FRONTEND_URL: http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com
        run: |
          echo "🔨 Building Docker image..."
          docker build \
            --build-arg FRONTEND_URL=$FRONTEND_URL \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f InsurancePortal.API/Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "📤 Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "✅ Docker image pushed successfully!"

      - name: 🚀 Deploy to App Runner
        run: |
          echo "🔍 Checking current service status..."
          CURRENT_STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)
          echo "Current service status: $CURRENT_STATUS"

          # Handle different service states
          case $CURRENT_STATUS in
            "RUNNING")
              echo "✅ Service is running, starting deployment..."
              aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
              ;;
            "CREATE_FAILED"|"DELETE_FAILED")
              echo "❌ Service is in failed state: $CURRENT_STATUS"
              echo "Please check AWS Console and fix the service manually"
              exit 1
              ;;
            "PAUSED")
              echo "⏸️ Service is paused, resuming first..."
              aws apprunner resume-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
              echo "⏳ Waiting for service to resume..."
              timeout 600 bash -c '
                while true; do
                  STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)
                  echo "Resume status: $STATUS"
                  if [[ "$STATUS" == "RUNNING" ]]; then
                    echo "✅ Service resumed successfully!"
                    break
                  elif [[ "$STATUS" =~ .*_FAILED ]]; then
                    echo "❌ Service resume failed with status: $STATUS"
                    exit 1
                  fi
                  sleep 20
                done
              '
              echo "🚀 Starting deployment after resume..."
              aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
              ;;
            "OPERATION_IN_PROGRESS")
              echo "⏳ Service operation already in progress, waiting for completion..."
              timeout 900 bash -c '
                while true; do
                  STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)
                  echo "Current status: $STATUS"
                  if [[ "$STATUS" == "RUNNING" ]]; then
                    echo "✅ Previous operation completed, starting deployment..."
                    aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
                    break
                  elif [[ "$STATUS" =~ .*_FAILED ]]; then
                    echo "❌ Previous operation failed with status: $STATUS"
                    exit 1
                  fi
                  sleep 30
                done
              '
              ;;
            *)
              echo "⚠️ Unknown service status: $CURRENT_STATUS"
              echo "Waiting for service to become available..."
              timeout 900 bash -c '
                while true; do
                  STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)
                  echo "Waiting status: $STATUS"
                  if [[ "$STATUS" == "RUNNING" ]]; then
                    echo "✅ Service is now running, starting deployment..."
                    aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
                    break
                  elif [[ "$STATUS" =~ .*_FAILED ]]; then
                    echo "❌ Service failed with status: $STATUS"
                    exit 1
                  fi
                  sleep 30
                done
              '
              ;;
          esac

          echo "⏳ Waiting for deployment to complete..."
          timeout 900 bash -c '
            while true; do
              STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)
              OPERATION_STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.ServiceUrl --output text 2>/dev/null || echo "unavailable")
              
              echo "Deployment status: $STATUS"
              
              if [[ "$STATUS" == "RUNNING" ]]; then
                echo "✅ Deployment completed successfully!"
                break
              elif [[ "$STATUS" =~ .*_FAILED ]]; then
                echo "❌ Deployment failed with status: $STATUS"
                
                # Get failure details
                echo "🔍 Checking for deployment failures..."
                aws apprunner list-operations --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --max-items 3 || true
                exit 1
              fi
              
              sleep 30
            done
          '

      - name: 🔗 Get API URL
        id: get-api-url
        run: |
          API_URL=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query 'Service.ServiceUrl' --output text)
          echo "url=https://$API_URL" >> $GITHUB_OUTPUT
          echo "🌐 Live API: https://$API_URL"

  deploy-frontend:
    name: 🌐 Deploy Frontend to S3
    needs: [test, deploy-api]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: insurance-portal-ui/package-lock.json

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install dependencies
        run: |
          cd insurance-portal-ui
          npm ci

      - name: 🔧 Update environment for production
        run: |
          cd insurance-portal-ui/src/environments

          # Get the API URL from App Runner
          API_URL=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query 'Service.ServiceUrl' --output text)

          cat > environment.prod.ts << EOF
          export const environment = {
            production: true,
            apiUrl: 'https://$API_URL',
            signalRUrl: 'https://$API_URL/claimHub'
          };
          EOF

          echo "✅ Environment updated with API URL: https://$API_URL"

      - name: 🔨 Build Angular
        run: |
          cd insurance-portal-ui
          npm run build:prod

      - name: 🌐 Deploy to S3 and configure SPA routing
        run: |
          echo "🚀 Deploying to: $S3_BUCKET"

          # Find the correct dist directory
          if [ -d "insurance-portal-ui/dist/insurance-portal-ui" ]; then
            DIST_DIR="insurance-portal-ui/dist/insurance-portal-ui"
          elif [ -d "insurance-portal-ui/dist" ]; then
            DIST_DIR="insurance-portal-ui/dist"
          else
            echo "❌ Could not find build output directory"
            ls -la insurance-portal-ui/  # Debug: show what's actually there
            exit 1
          fi

          echo "📁 Using build directory: $DIST_DIR"
          ls -la "$DIST_DIR"  # Debug: show what files we're deploying

          # Upload files to S3
          echo "📤 Syncing files to S3..."
          aws s3 sync "$DIST_DIR" s3://$S3_BUCKET --delete --region $AWS_REGION

          # Configure S3 for SPA routing - this is the critical part!
          echo "🔧 Configuring S3 website for SPA routing..."
          aws s3 website s3://$S3_BUCKET \
            --index-document index.html \
            --error-document index.html \
            --region $AWS_REGION

          # Verify the website configuration
          echo "✅ Verifying S3 website configuration..."
          aws s3api get-bucket-website --bucket $S3_BUCKET --region $AWS_REGION

          # Set proper content types
          echo "🔧 Setting content types..."
          aws s3 cp s3://$S3_BUCKET/index.html s3://$S3_BUCKET/index.html \
            --metadata-directive REPLACE \
            --content-type "text/html" \
            --region $AWS_REGION

          echo "✅ S3 deployment complete!"
          echo "🌐 Website URL: http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com"

      - name: 🔄 Invalidate CloudFront Cache
        run: |
          echo "🔄 Invalidating CloudFront cache for distribution: $CLOUDFRONT_DISTRIBUTION_ID"

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "✅ Cache invalidation created: $INVALIDATION_ID"
          echo "🌐 HTTPS URL: https://$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID --query 'Distribution.DomainName' --output text)"
          echo "⏳ Cache invalidation takes 3-5 minutes to complete"

  notify:
    name: 📢 Deployment Complete
    needs: [deploy-api, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 🎉 Success Notification
        if: ${{ needs.deploy-api.result == 'success' && needs.deploy-frontend.result == 'success' }}
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 Frontend: http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com"
          echo "🚀 API: ${{ needs.deploy-api.outputs.api-url }}"

      - name: ❌ Failure Notification
        if: ${{ needs.deploy-api.result == 'failure' || needs.deploy-frontend.result == 'failure' }}
        run: |
          echo "❌ Deployment failed!"
          echo "API Status: ${{ needs.deploy-api.result }}"
          echo "Frontend Status: ${{ needs.deploy-frontend.result }}"
