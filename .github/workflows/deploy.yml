name: üöÄ Deploy Insurance Portal

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: insurance-portal-api
  API_SERVICE_ARN: arn:aws:apprunner:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:service/insurance-portal-api/${{ secrets.APP_RUNNER_SERVICE_ID }}
  S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: üì¶ Restore dependencies
        run: dotnet restore

      - name: üî® Build API
        run: dotnet build --no-restore --configuration Release

      - name: üß™ Run Tests
        run: dotnet test --no-build --verbosity normal --configuration Release

  deploy-api:
    name: üê≥ Deploy API to AWS App Runner
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      api-url: ${{ steps.get-api-url.outputs.url }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üî® Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üî® Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f InsurancePortal.API/Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "üì§ Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "‚úÖ Docker image pushed successfully!"

      - name: üîç Check App Runner Service Status
        id: check-status
        run: |
          echo "üîç Checking App Runner service status..."
          STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query 'Service.Status' --output text)
          echo "üìä Current status: $STATUS"
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: üöÄ Deploy to App Runner
        run: |
          STATUS="${{ steps.check-status.outputs.status }}"

          if [[ "$STATUS" == "RUNNING" ]]; then
            echo "‚úÖ Service is running, starting deployment..."
            aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
          elif [[ "$STATUS" == "PAUSED" ]]; then
            echo "‚è∏Ô∏è Service is paused, resuming first..."
            aws apprunner resume-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
            echo "‚è≥ Waiting for service to be running..."
            aws apprunner wait service-running --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
            echo "üöÄ Now starting deployment..."
            aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
          elif [[ "$STATUS" == "DELETE_FAILED" ]] || [[ "$STATUS" == "CREATE_FAILED" ]]; then
            echo "‚ùå Service is in failed state: $STATUS"
            echo "üîß You may need to recreate the App Runner service manually"
            exit 1
          else
            echo "‚ö†Ô∏è Service status is: $STATUS"
            echo "‚è≥ Waiting for service to be ready..."
            timeout 300 bash -c 'while [[ "$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)" != "RUNNING" ]]; do echo "Waiting..."; sleep 30; done' || true
            
            # Try deployment after waiting
            FINAL_STATUS=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query 'Service.Status' --output text)
            if [[ "$FINAL_STATUS" == "RUNNING" ]]; then
              echo "‚úÖ Service is now running, starting deployment..."
              aws apprunner start-deployment --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }}
            else
              echo "‚ùå Service failed to reach RUNNING state: $FINAL_STATUS"
              exit 1
            fi
          fi

          echo "‚è≥ Waiting for deployment to complete..."
          timeout 600 bash -c 'while [[ "$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query Service.Status --output text)" != "RUNNING" ]]; do echo "Deploying..."; sleep 30; done' || true

          echo "‚úÖ App Runner deployment completed!"

      - name: üîó Get API URL
        id: get-api-url
        run: |
          API_URL=$(aws apprunner describe-service --service-arn ${{ env.API_SERVICE_ARN }} --region ${{ env.AWS_REGION }} --query 'Service.ServiceUrl' --output text)
          echo "url=https://$API_URL" >> $GITHUB_OUTPUT
          echo "üåê Live API: https://$API_URL"

  deploy-frontend:
    name: üåê Deploy Frontend to S3
    needs: [test, deploy-api]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: insurance-portal-ui/package-lock.json
        continue-on-error: true

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Install dependencies
        run: |
          cd insurance-portal-ui
          npm install
          npm ci

      - name: üîß Update environment files
        run: |
          cd insurance-portal-ui/src/environments

          echo "üîß Current API URL: ${{ needs.deploy-api.outputs.api-url }}"

          # Backup original files
          cp environment.prod.ts environment.prod.ts.bak
          cp environment.ts environment.ts.bak

          # Update environment files
          cat > environment.prod.ts << EOF
          export const environment = {
            production: true,
            apiUrl: '${{ needs.deploy-api.outputs.api-url }}',
            hubUrl: '${{ needs.deploy-api.outputs.api-url }}/claimHub'
          };
          EOF

          cat > environment.ts << EOF
          export const environment = {
            production: false,
            apiUrl: '${{ needs.deploy-api.outputs.api-url }}',
            hubUrl: '${{ needs.deploy-api.outputs.api-url }}/claimHub'
          };
          EOF

          echo "‚úÖ Environment files updated!"
          echo "üìÑ Production environment:"
          cat environment.prod.ts

      - name: üî® Build Angular
        run: |
          cd insurance-portal-ui
          npm run build:prod

      - name: üåê Deploy to S3
        run: |
          echo "üöÄ Deploying to: $S3_BUCKET"

          # Debug: Check build output
          echo "üìÅ Checking build output:"
          ls -la insurance-portal-ui/dist/

          # Create bucket if it doesn't exist
          if ! aws s3 ls "s3://$S3_BUCKET" 2>/dev/null; then
            echo "üì¶ Creating S3 bucket: $S3_BUCKET"
            aws s3 mb s3://$S3_BUCKET --region $AWS_REGION
            
            # Configure static website hosting
            aws s3 website s3://$S3_BUCKET --index-document index.html --error-document index.html
            
            # Set bucket policy for public read access
            aws s3api put-bucket-policy --bucket $S3_BUCKET --policy '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PublicReadGetObject",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::'$S3_BUCKET'/*"
                }
              ]
            }'
            
            # Remove public access blocks
            aws s3api put-public-access-block --bucket $S3_BUCKET --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
            
            echo "‚úÖ S3 bucket configured for static website hosting"
          fi

          # Find the correct dist directory
          if [ -d "insurance-portal-ui/dist/insurance-portal-ui" ]; then
            DIST_DIR="insurance-portal-ui/dist/insurance-portal-ui"
          elif [ -d "insurance-portal-ui/dist" ]; then
            DIST_DIR="insurance-portal-ui/dist"
          else
            echo "‚ùå Could not find build output directory"
            exit 1
          fi

          echo "üì§ Syncing from: $DIST_DIR"

          # Deploy files
          aws s3 sync "$DIST_DIR" s3://$S3_BUCKET --delete --exact-timestamps
          aws s3 cp s3://$S3_BUCKET/index.html s3://$S3_BUCKET/index.html --metadata-directive REPLACE --cache-control "no-cache"

          echo "‚úÖ Deployed to S3!"
          echo "üåê Website URL: http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com"

      - name: üîç Debug S3 Deployment
        run: |
          echo "üîç Debugging S3 deployment..."

          # Check if files were uploaded
          echo "üìÅ S3 bucket contents:"
          aws s3 ls s3://$S3_BUCKET --recursive

          # Check bucket website configuration
          echo "üåê Website configuration:"
          aws s3api get-bucket-website --bucket $S3_BUCKET || echo "No website configuration found"

          # Test the website URL
          echo "üîó Testing website URL:"
          curl -I "http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com" || echo "Website not accessible"

  notify:
    name: üì¢ Success
    needs: [deploy-api, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üéâ Deployment Complete
        run: |
          echo "üöÄ Insurance Portal deployed successfully!"
          echo ""
          echo "üåê Frontend: http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          echo "üîó API: ${{ needs.deploy-api.outputs.api-url }}/swagger"
          echo "üè• Health: ${{ needs.deploy-api.outputs.api-url }}/health"  
          echo "üì° SignalR: ${{ needs.deploy-api.outputs.api-url }}/claimHub"
          echo ""
          echo "‚ú® Real-time features ready!"
